@page "/login"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using OwaspTopTenDemo.Blazor.Services
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject TokenService TokenService

<h3>Login</h3>

<EditForm Model="loginModel" OnValidSubmit="HandleSecureLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="username" class="form-label">Username:</label>
        <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password:</label>
        <InputText id="password" class="form-control" @bind-Value="loginModel.Password" type="password" />
    </div>
    <button type="submit" class="btn btn-primary">Secure Login</button>
</EditForm>

<EditForm Model="loginModel" OnValidSubmit="HandleInsecureLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="username" class="form-label">Username:</label>
        <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password:</label>
        <InputText id="password" class="form-control" @bind-Value="loginModel.Password" type="password" />
    </div>
    <button type="submit" class="btn btn-danger">Insecure Login</button>
</EditForm>

<button class="btn btn-secondary" @onclick="HandleLogout">Logout</button>

<p>@message</p>

@code {
    private LoginModel loginModel = new LoginModel();
    private string message;

    private async Task HandleSecureLogin()
    {
        var response = await Http.PostAsJsonAsync("api/auth/secure-login", loginModel);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<LoginResult>();
            var token = result.Token;

            // Store the token in local storage
            await TokenService.SetToken(token);

            // Notify the authentication state provider
            if (AuthStateProvider is CustomAuthStateProvider customAuthStateProvider)
            {
                customAuthStateProvider.NotifyUserAuthentication(token);
            }

            // Configure HttpClient to use the token
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            // Navigate to the home page
            Navigation.NavigateTo("/");
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.TooManyRequests)
        {
            message = "Too many login attempts. Please try again later.";
        }
        else
        {
            message = "Secure login failed.";
        }
    }

    private async Task HandleInsecureLogin()
    {
        var response = await Http.PostAsJsonAsync("api/auth/insecure-login", loginModel);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<LoginResult>();
            var token = result.Token;

            // Store the token in local storage
            await TokenService.SetToken(token);

            // Notify the authentication state provider
            if (AuthStateProvider is CustomAuthStateProvider customAuthStateProvider)
            {
                customAuthStateProvider.NotifyUserAuthentication(token);
            }

            // Configure HttpClient to use the token
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            // Navigate to the home page
            Navigation.NavigateTo("/");
        }
        else
        {
            message = "Insecure login failed.";
        }
    }

    private async Task HandleLogout()
    {
        // Notify the authentication state provider
        if (AuthStateProvider is CustomAuthStateProvider customAuthStateProvider)
        {
            customAuthStateProvider.NotifyUserLogout();
        }

        // Clear the token from local storage
        await TokenService.RemoveToken();

        // Clear the Authorization header
        Http.DefaultRequestHeaders.Authorization = null;

        // Navigate to the login page
        Navigation.NavigateTo("/login");
    }

    public class LoginModel
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }

    public class LoginResult
    {
        public string Token { get; set; }
    }
}
